'use client';

import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import ImageGrid from '../../../components/ImageGrid';
import CategoryList from '../../../components/CategoryList';

interface ImageItem {
  id: string;
  url: string;
  alt: string;
  category: string;
  subcategory?: string;
  filename: string;
}

export default function CategoryPage() {
  const params = useParams();
  const router = useRouter();
  const category = params?.category as string;
  const locale = params?.locale as string;
  
  const [images, setImages] = useState<ImageItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ================================================================================
  // 🎯 CategoryList 핸들러 함수들
  // ================================================================================

  const handleCategorySelect = (selectedCategory: string) => {
    console.log('🔄 카테고리 선택:', selectedCategory);
    router.push(`/${locale}/admin/images/manage/category/${selectedCategory}`);
  };

  const handleSubcategorySelect = (selectedCategory: string, selectedSubcategory: string) => {
    console.log('🔄 서브카테고리 선택:', selectedCategory, '>', selectedSubcategory);
    router.push(`/${locale}/admin/images/manage/category/${selectedCategory}/${selectedSubcategory}`);
  };

  useEffect(() => {
    const fetchImages = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/sync-images', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ category })
        });

        if (!response.ok) {
          throw new Error('이미지 로딩 실패');
        }

        const data = await response.json();
        setImages(data.syncedImages || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : '알 수 없는 오류');
      } finally {
        setLoading(false);
      }
    };

    if (category) {
      fetchImages();
    }
  }, [category]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="animate-pulse">
              <div className="h-8 bg-gray-300 rounded w-1/4 mb-4"></div>
              <div className="grid grid-cols-4 gap-4">
                {[...Array(8)].map((_, i) => (
                  <div key={i} className="h-32 bg-gray-300 rounded"></div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="bg-red-50 p-4 rounded-lg">
              <p className="text-red-700 text-xl">❌ 오류 발생</p>
              <p className="text-red-600 mt-2">{error}</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* 헤더 */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold text-gray-900">
              카테고리: {category}
            </h1>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">
                총 {images.length}개 이미지
              </span>
              <button 
                onClick={() => window.location.reload()}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                새로고침
              </button>
            </div>
          </div>
        </div>

        {/* 카테고리 네비게이션 */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <CategoryList 
            selectedCategory={category}
            selectedSubcategory={null}
            onCategorySelect={handleCategorySelect}
            onSubcategorySelect={handleSubcategorySelect}
            categoryStats={{}}
          />
        </div>

        {/* 이미지 그리드 */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-xl font-semibold mb-4">이미지 목록</h2>
          {images.length > 0 ? (
            <ImageGrid images={images} />
          ) : (
            <div className="text-center py-12">
              <div className="text-gray-400 text-6xl mb-4">📷</div>
              <p className="text-gray-500 text-lg">
                {category} 카테고리에 이미지가 없습니다.
              </p>
              <p className="text-gray-400 mt-2">
                이미지를 업로드하거나 동기화를 실행하세요.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
